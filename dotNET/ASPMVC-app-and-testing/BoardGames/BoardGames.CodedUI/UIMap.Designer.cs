// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace BoardGames.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// OpenIELocalhost - Use 'OpenIELocalhostParams' to pass parameters into this method.
        /// </summary>
        public void OpenIELocalhost()
        {

            // Go to web page 'http://localhost:5000/' using new browser instance
            this.UIPustastronaInternetEWindow.LaunchUrl(new System.Uri(this.OpenIELocalhostParams.UIPustastronaInternetEWindowUrl));
        }
        
        /// <summary>
        /// AssertOnLocalhostMain - Use 'AssertOnLocalhostMainExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOnLocalhostMain()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIHomePageBoardGamesReWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/'
            Assert.AreEqual(this.AssertOnLocalhostMainExpectedValues.UIAdresEditText, uIAdresEdit.Text, "Not on localhost:5000 site");
        }
        
        /// <summary>
        /// LoginAsAdmin - Use 'LoginAsAdminParams' to pass parameters into this method.
        /// </summary>
        public void LoginAsAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIHomePageBoardGamesReWindow.UIHomePageBoardGamesReDocument.UILoginHyperlink;
            HtmlEdit uIEmailEdit = this.UIHomePageBoardGamesReWindow.UILoginBoardGamesRentaDocument.UIEmailEdit;
            HtmlEdit uIPasswordEdit = this.UIHomePageBoardGamesReWindow.UILoginBoardGamesRentaDocument.UIPasswordEdit;
            HtmlButton uILoginButton = this.UIHomePageBoardGamesReWindow.UILoginBoardGamesRentaDocument.UILoginButton;
            #endregion

            // Click 'Log in' link
            Mouse.Click(uILoginHyperlink, new Point(31, 35));

            // Type 'admin@admins.com' in 'Email' text box
            uIEmailEdit.Text = this.LoginAsAdminParams.UIEmailEditText;

            // Type '********' in 'Password' text box
            uIPasswordEdit.Password = this.LoginAsAdminParams.UIPasswordEditPassword;

            // Click 'Log in' button
            Mouse.Click(uILoginButton, new Point(59, 24));
        }
        
        /// <summary>
        /// Checks if welcome text contains admin string
        /// </summary>
        public void AssertIsLoggedAsAdmin()
        {
            #region Variable Declarations
            HtmlHyperlink uIHelloadminadminscomHyperlink = this.UIHomePageBoardGamesReWindow.UIHomePageBoardGamesReDocument.UIHelloadminadminscomHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Hello admin@admins.com!' link contains 'admin'
            StringAssert.Contains(uIHelloadminadminscomHyperlink.InnerText, this.AssertIsLoggedAsAdminExpectedValues.UIHelloadminadminscomHyperlinkInnerText, "Didn\'t log in as admin");
        }
        
        /// <summary>
        /// GoToGamesIndex
        /// </summary>
        public void GoToGamesIndex()
        {
            #region Variable Declarations
            HtmlHyperlink uIGamesHyperlink = this.UIHomePageBoardGamesReWindow.UIHomePageBoardGamesReDocument.UIGamesHyperlink;
            #endregion

            // Click 'Games' link
            Mouse.Click(uIGamesHyperlink, new Point(35, 38));
        }
        
        /// <summary>
        /// AssertOnGamesIndex - Use 'AssertOnGamesIndexExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOnGamesIndex()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIGamesListBoardGamesRWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Games'
            Assert.AreEqual(this.AssertOnGamesIndexExpectedValues.UIAdresEditText, uIAdresEdit.Text, "Didn\'t go to Games index page");
        }
        
        /// <summary>
        /// AddGame - Use 'AddGameParams' to pass parameters into this method.
        /// </summary>
        public void AddGame()
        {
            #region Variable Declarations
            HtmlHyperlink uIAddNewItemHyperlink = this.UIGamesListBoardGamesRWindow.UIGamesListBoardGamesRDocument.UIAddNewItemHyperlink;
            HtmlEdit uITitleEdit = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UITitleEdit;
            HtmlEdit uIGenreEdit = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UIGenreEdit;
            HtmlEdit uIMinGamersEdit = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UIMinGamersEdit;
            HtmlEdit uIMaxGamersEdit = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UIMaxGamersEdit;
            HtmlEdit uIReleaseDateEdit = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UIReleaseDateEdit;
            HtmlEdit uIPriceEdit = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UIPriceEdit;
            HtmlInputButton uICreateButton = this.UIGamesListBoardGamesRWindow.UICreateBoardGamesRentDocument.UICreateButton;
            #endregion

            // Click 'Add New Item' link
            Mouse.Click(uIAddNewItemHyperlink, new Point(33, 11));

            // Type 'A game' in 'Title' text box
            uITitleEdit.Text = this.AddGameParams.UITitleEditText;

            // Type 'CodedUI' in 'Genre' text box
            uIGenreEdit.Text = this.AddGameParams.UIGenreEditText;

            // Type '2' in 'Min Gamers' text box
            uIMinGamersEdit.Text = this.AddGameParams.UIMinGamersEditText;

            // Type '4' in 'Max Gamers' text box
            uIMaxGamersEdit.Text = this.AddGameParams.UIMaxGamersEditText;

            // Type '22-04-2018' in 'Release Date' text box
            uIReleaseDateEdit.Text = this.AddGameParams.UIReleaseDateEditText;

            // Type '70' in 'Price' text box
            uIPriceEdit.Text = this.AddGameParams.UIPriceEditText;

            // Click 'Create' button
            Mouse.Click(uICreateButton, new Point(23, 16));
        }
        
        /// <summary>
        /// AssertGameWasAddedSoTableContainsIt - Use 'AssertGameWasAddedSoTableContainsItExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGameWasAddedSoTableContainsIt()
        {
            #region Variable Declarations
            HtmlCell uICodedUICell = this.UIGamesListBoardGamesRWindow.UIGamesListBoardGamesRDocument.UIItemTable.UICodedUICell;
            #endregion

            // Verify that the 'InnerText' property of 'CodedUI' cell equals 'CodedUI '
            Assert.AreEqual(this.AssertGameWasAddedSoTableContainsItExpectedValues.UICodedUICellInnerText, uICodedUICell.InnerText, "Didn\'t create game for CodedUI tests");
        }
        
        /// <summary>
        /// EditWithInvalidData - Use 'EditWithInvalidDataParams' to pass parameters into this method.
        /// </summary>
        public void EditWithInvalidData()
        {
            #region Variable Declarations
            HtmlHyperlink uIEditHyperlink = this.UIGamesListBoardGamesRWindow.UIGamesListBoardGamesRDocument.UIEditHyperlink;
            HtmlEdit uIMaxGamersEdit = this.UIGamesListBoardGamesRWindow.UIEditBoardGamesRentalDocument.UIMaxGamersEdit;
            HtmlInputButton uISaveButton = this.UIGamesListBoardGamesRWindow.UIEditBoardGamesRentalDocument.UISaveButton;
            #endregion

            // Click 'Edit' link
            Mouse.Click(uIEditHyperlink, new Point(12, 18));

            // Type '40' in 'Max Gamers' text box
            uIMaxGamersEdit.Text = this.EditWithInvalidDataParams.UIMaxGamersEditText;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(40, 18));
        }
        
        /// <summary>
        /// EditWithValidData - Use 'EditWithValidDataParams' to pass parameters into this method.
        /// </summary>
        public void EditWithValidData()
        {
            #region Variable Declarations
            HtmlEdit uIMaxGamersEdit1 = this.UIGamesListBoardGamesRWindow.UIEditBoardGamesRentalDocument.UIMaxGamersEdit1;
            HtmlInputButton uISaveButton = this.UIGamesListBoardGamesRWindow.UIEditBoardGamesRentalDocument.UISaveButton;
            #endregion

            // Type '20' in 'Max Gamers' text box
            uIMaxGamersEdit1.Text = this.EditWithValidDataParams.UIMaxGamersEdit1Text;

            // Click 'Save' button
            Mouse.Click(uISaveButton, new Point(39, 24));
        }
        
        /// <summary>
        /// AssertGameWasEdited_AndRedirectedToGamesPage - Use 'AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGameWasEdited_AndRedirectedToGamesPage()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIGamesListBoardGamesRWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Games'
            Assert.AreEqual(this.AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues.UIAdresEditText, uIAdresEdit.Text);
        }
        
        /// <summary>
        /// ShowDetails
        /// </summary>
        public void ShowDetails()
        {
            #region Variable Declarations
            HtmlHyperlink uIDetailsHyperlink = this.UIGamesListBoardGamesRWindow.UIGamesListBoardGamesRDocument.UIDetailsHyperlink;
            #endregion

            // Click 'Details' link
            Mouse.Click(uIDetailsHyperlink, new Point(27, 28));
        }
        
        /// <summary>
        /// AssertGameDetailsWereShown - Use 'AssertGameDetailsWereShownExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGameDetailsWereShown()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIDetailsBoardGamesRenWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box contains 'Games/Details'
            StringAssert.Contains(uIAdresEdit.Text, this.AssertGameDetailsWereShownExpectedValues.UIAdresEditText);
        }
        
        /// <summary>
        /// GoBackToGameIndex
        /// </summary>
        public void GoBackToGameIndex()
        {
            #region Variable Declarations
            HtmlHyperlink uIBacktoListHyperlink = this.UIDetailsBoardGamesRenWindow.UIDetailsBoardGamesRenDocument.UIBacktoListHyperlink;
            #endregion

            // Click 'Back to List' link
            Mouse.Click(uIBacktoListHyperlink, new Point(65, 6));
        }
        
        /// <summary>
        /// DeleteAGame
        /// </summary>
        public void DeleteAGame()
        {
            #region Variable Declarations
            HtmlHyperlink uIDeleteHyperlink = this.UIGamesListBoardGamesRWindow.UIGamesListBoardGamesRDocument.UIDeleteHyperlink;
            HtmlInputButton uIDeleteButton = this.UIGamesListBoardGamesRWindow.UIDeleteBoardGamesRentDocument.UIDeleteButton;
            #endregion

            // Click 'Delete' link
            Mouse.Click(uIDeleteHyperlink, new Point(39, 14));

            // Click 'Delete' button
            Mouse.Click(uIDeleteButton, new Point(37, 23));
        }
        
        /// <summary>
        /// Logout
        /// </summary>
        public void Logout()
        {
            #region Variable Declarations
            HtmlButton uILogoutButton = this.UIGamesListBoardGamesRWindow.UIGamesListBoardGamesRDocument.UILogoutButton;
            #endregion

            // Click 'Log out' button
            Mouse.Click(uILogoutButton, new Point(20, 23));
        }
        
        /// <summary>
        /// AssertIsLoggedOut_NavbarContainsLoginOption - Use 'AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertIsLoggedOut_NavbarContainsLoginOption()
        {
            #region Variable Declarations
            HtmlHyperlink uILoginHyperlink = this.UIHomePageBoardGamesReWindow.UIHomePageBoardGamesReDocument.UILoginHyperlink;
            #endregion

            // Verify that the 'InnerText' property of 'Log in' link equals 'Log in'
            Assert.AreEqual(this.AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues.UILoginHyperlinkInnerText, uILoginHyperlink.InnerText);
        }
        
        /// <summary>
        /// AssertGameWasNotEdited_AndStayedOnEditPage - Use 'AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGameWasNotEdited_AndStayedOnEditPage()
        {
            #region Variable Declarations
            WinEdit uIAdresEdit = this.UIGamesListBoardGamesRWindow.UIItemWindow.UIPasekadresuClient.UIAdresEdit;
            #endregion

            // Verify that the 'Text' property of 'Adres' text box contains '/Games/Edit/'
            StringAssert.Contains(uIAdresEdit.Text, this.AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues.UIAdresEditText);
        }
        
        /// <summary>
        /// AssertGameWasNotEdited_AndGotError - Use 'AssertGameWasNotEdited_AndGotErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertGameWasNotEdited_AndGotError()
        {
            #region Variable Declarations
            HtmlSpan uIMaxGamerserrorPane = this.UIGamesListBoardGamesRWindow.UIEditBoardGamesRentalDocument1.UIMaxGamerserrorPane;
            #endregion

            // Verify that the 'InnerText' property of 'MaxGamers-error' pane equals 'The field Max Gamers must be between 1 and 25.'
            Assert.AreEqual(this.AssertGameWasNotEdited_AndGotErrorExpectedValues.UIMaxGamerserrorPaneInnerText, uIMaxGamerserrorPane.InnerText);
        }
        
        #region Properties
        public virtual OpenIELocalhostParams OpenIELocalhostParams
        {
            get
            {
                if ((this.mOpenIELocalhostParams == null))
                {
                    this.mOpenIELocalhostParams = new OpenIELocalhostParams();
                }
                return this.mOpenIELocalhostParams;
            }
        }
        
        public virtual AssertOnLocalhostMainExpectedValues AssertOnLocalhostMainExpectedValues
        {
            get
            {
                if ((this.mAssertOnLocalhostMainExpectedValues == null))
                {
                    this.mAssertOnLocalhostMainExpectedValues = new AssertOnLocalhostMainExpectedValues();
                }
                return this.mAssertOnLocalhostMainExpectedValues;
            }
        }
        
        public virtual LoginAsAdminParams LoginAsAdminParams
        {
            get
            {
                if ((this.mLoginAsAdminParams == null))
                {
                    this.mLoginAsAdminParams = new LoginAsAdminParams();
                }
                return this.mLoginAsAdminParams;
            }
        }
        
        public virtual AssertIsLoggedAsAdminExpectedValues AssertIsLoggedAsAdminExpectedValues
        {
            get
            {
                if ((this.mAssertIsLoggedAsAdminExpectedValues == null))
                {
                    this.mAssertIsLoggedAsAdminExpectedValues = new AssertIsLoggedAsAdminExpectedValues();
                }
                return this.mAssertIsLoggedAsAdminExpectedValues;
            }
        }
        
        public virtual AssertOnGamesIndexExpectedValues AssertOnGamesIndexExpectedValues
        {
            get
            {
                if ((this.mAssertOnGamesIndexExpectedValues == null))
                {
                    this.mAssertOnGamesIndexExpectedValues = new AssertOnGamesIndexExpectedValues();
                }
                return this.mAssertOnGamesIndexExpectedValues;
            }
        }
        
        public virtual AddGameParams AddGameParams
        {
            get
            {
                if ((this.mAddGameParams == null))
                {
                    this.mAddGameParams = new AddGameParams();
                }
                return this.mAddGameParams;
            }
        }
        
        public virtual AssertGameWasAddedSoTableContainsItExpectedValues AssertGameWasAddedSoTableContainsItExpectedValues
        {
            get
            {
                if ((this.mAssertGameWasAddedSoTableContainsItExpectedValues == null))
                {
                    this.mAssertGameWasAddedSoTableContainsItExpectedValues = new AssertGameWasAddedSoTableContainsItExpectedValues();
                }
                return this.mAssertGameWasAddedSoTableContainsItExpectedValues;
            }
        }
        
        public virtual EditWithInvalidDataParams EditWithInvalidDataParams
        {
            get
            {
                if ((this.mEditWithInvalidDataParams == null))
                {
                    this.mEditWithInvalidDataParams = new EditWithInvalidDataParams();
                }
                return this.mEditWithInvalidDataParams;
            }
        }
        
        public virtual EditWithValidDataParams EditWithValidDataParams
        {
            get
            {
                if ((this.mEditWithValidDataParams == null))
                {
                    this.mEditWithValidDataParams = new EditWithValidDataParams();
                }
                return this.mEditWithValidDataParams;
            }
        }
        
        public virtual AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues
        {
            get
            {
                if ((this.mAssertGameWasEdited_AndRedirectedToGamesPageExpectedValues == null))
                {
                    this.mAssertGameWasEdited_AndRedirectedToGamesPageExpectedValues = new AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues();
                }
                return this.mAssertGameWasEdited_AndRedirectedToGamesPageExpectedValues;
            }
        }
        
        public virtual AssertGameDetailsWereShownExpectedValues AssertGameDetailsWereShownExpectedValues
        {
            get
            {
                if ((this.mAssertGameDetailsWereShownExpectedValues == null))
                {
                    this.mAssertGameDetailsWereShownExpectedValues = new AssertGameDetailsWereShownExpectedValues();
                }
                return this.mAssertGameDetailsWereShownExpectedValues;
            }
        }
        
        public virtual AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues
        {
            get
            {
                if ((this.mAssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues == null))
                {
                    this.mAssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues = new AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues();
                }
                return this.mAssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues;
            }
        }
        
        public virtual AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues
        {
            get
            {
                if ((this.mAssertGameWasNotEdited_AndStayedOnEditPageExpectedValues == null))
                {
                    this.mAssertGameWasNotEdited_AndStayedOnEditPageExpectedValues = new AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues();
                }
                return this.mAssertGameWasNotEdited_AndStayedOnEditPageExpectedValues;
            }
        }
        
        public virtual AssertGameWasNotEdited_AndGotErrorExpectedValues AssertGameWasNotEdited_AndGotErrorExpectedValues
        {
            get
            {
                if ((this.mAssertGameWasNotEdited_AndGotErrorExpectedValues == null))
                {
                    this.mAssertGameWasNotEdited_AndGotErrorExpectedValues = new AssertGameWasNotEdited_AndGotErrorExpectedValues();
                }
                return this.mAssertGameWasNotEdited_AndGotErrorExpectedValues;
            }
        }
        
        public UIPustastronaInternetEWindow UIPustastronaInternetEWindow
        {
            get
            {
                if ((this.mUIPustastronaInternetEWindow == null))
                {
                    this.mUIPustastronaInternetEWindow = new UIPustastronaInternetEWindow();
                }
                return this.mUIPustastronaInternetEWindow;
            }
        }
        
        public UIHomePageBoardGamesReWindow UIHomePageBoardGamesReWindow
        {
            get
            {
                if ((this.mUIHomePageBoardGamesReWindow == null))
                {
                    this.mUIHomePageBoardGamesReWindow = new UIHomePageBoardGamesReWindow();
                }
                return this.mUIHomePageBoardGamesReWindow;
            }
        }
        
        public UIGamesListBoardGamesRWindow UIGamesListBoardGamesRWindow
        {
            get
            {
                if ((this.mUIGamesListBoardGamesRWindow == null))
                {
                    this.mUIGamesListBoardGamesRWindow = new UIGamesListBoardGamesRWindow();
                }
                return this.mUIGamesListBoardGamesRWindow;
            }
        }
        
        public UIDetailsBoardGamesRenWindow UIDetailsBoardGamesRenWindow
        {
            get
            {
                if ((this.mUIDetailsBoardGamesRenWindow == null))
                {
                    this.mUIDetailsBoardGamesRenWindow = new UIDetailsBoardGamesRenWindow();
                }
                return this.mUIDetailsBoardGamesRenWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenIELocalhostParams mOpenIELocalhostParams;
        
        private AssertOnLocalhostMainExpectedValues mAssertOnLocalhostMainExpectedValues;
        
        private LoginAsAdminParams mLoginAsAdminParams;
        
        private AssertIsLoggedAsAdminExpectedValues mAssertIsLoggedAsAdminExpectedValues;
        
        private AssertOnGamesIndexExpectedValues mAssertOnGamesIndexExpectedValues;
        
        private AddGameParams mAddGameParams;
        
        private AssertGameWasAddedSoTableContainsItExpectedValues mAssertGameWasAddedSoTableContainsItExpectedValues;
        
        private EditWithInvalidDataParams mEditWithInvalidDataParams;
        
        private EditWithValidDataParams mEditWithValidDataParams;
        
        private AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues mAssertGameWasEdited_AndRedirectedToGamesPageExpectedValues;
        
        private AssertGameDetailsWereShownExpectedValues mAssertGameDetailsWereShownExpectedValues;
        
        private AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues mAssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues;
        
        private AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues mAssertGameWasNotEdited_AndStayedOnEditPageExpectedValues;
        
        private AssertGameWasNotEdited_AndGotErrorExpectedValues mAssertGameWasNotEdited_AndGotErrorExpectedValues;
        
        private UIPustastronaInternetEWindow mUIPustastronaInternetEWindow;
        
        private UIHomePageBoardGamesReWindow mUIHomePageBoardGamesReWindow;
        
        private UIGamesListBoardGamesRWindow mUIGamesListBoardGamesRWindow;
        
        private UIDetailsBoardGamesRenWindow mUIDetailsBoardGamesRenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenIELocalhost'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenIELocalhostParams
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'http://localhost:5000/' using new browser instance
        /// </summary>
        public string UIPustastronaInternetEWindowUrl = "http://localhost:5000/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOnLocalhostMain'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertOnLocalhostMainExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginAsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginAsAdminParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'admin@admins.com' in 'Email' text box
        /// </summary>
        public string UIEmailEditText = "admin@admins.com";
        
        /// <summary>
        /// Type '********' in 'Password' text box
        /// </summary>
        public string UIPasswordEditPassword = "Cf6+rNQubXkqzKc/jQXexQKmdE+3YIke";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertIsLoggedAsAdmin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertIsLoggedAsAdminExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Hello admin@admins.com!' link contains 'admin'
        /// </summary>
        public string UIHelloadminadminscomHyperlinkInnerText = "admin";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOnGamesIndex'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertOnGamesIndexExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Games'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/Games";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddGame'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddGameParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'A game' in 'Title' text box
        /// </summary>
        public string UITitleEditText = "A game";
        
        /// <summary>
        /// Type 'CodedUI' in 'Genre' text box
        /// </summary>
        public string UIGenreEditText = "CodedUI";
        
        /// <summary>
        /// Type '2' in 'Min Gamers' text box
        /// </summary>
        public string UIMinGamersEditText = "2";
        
        /// <summary>
        /// Type '4' in 'Max Gamers' text box
        /// </summary>
        public string UIMaxGamersEditText = "4";
        
        /// <summary>
        /// Type '22-04-2018' in 'Release Date' text box
        /// </summary>
        public string UIReleaseDateEditText = "22-04-2018";
        
        /// <summary>
        /// Type '70' in 'Price' text box
        /// </summary>
        public string UIPriceEditText = "70";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGameWasAddedSoTableContainsIt'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertGameWasAddedSoTableContainsItExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'CodedUI' cell equals 'CodedUI '
        /// </summary>
        public string UICodedUICellInnerText = "CodedUI ";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditWithInvalidData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditWithInvalidDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type '40' in 'Max Gamers' text box
        /// </summary>
        public string UIMaxGamersEditText = "40";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EditWithValidData'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class EditWithValidDataParams
    {
        
        #region Fields
        /// <summary>
        /// Type '20' in 'Max Gamers' text box
        /// </summary>
        public string UIMaxGamersEdit1Text = "20";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGameWasEdited_AndRedirectedToGamesPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertGameWasEdited_AndRedirectedToGamesPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box equals 'http://localhost:5000/Games'
        /// </summary>
        public string UIAdresEditText = "http://localhost:5000/Games";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGameDetailsWereShown'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertGameDetailsWereShownExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box contains 'Games/Details'
        /// </summary>
        public string UIAdresEditText = "Games/Details";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertIsLoggedOut_NavbarContainsLoginOption'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertIsLoggedOut_NavbarContainsLoginOptionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Log in' link equals 'Log in'
        /// </summary>
        public string UILoginHyperlinkInnerText = "Log in";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGameWasNotEdited_AndStayedOnEditPage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertGameWasNotEdited_AndStayedOnEditPageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Adres' text box contains '/Games/Edit/'
        /// </summary>
        public string UIAdresEditText = "/Games/Edit/";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertGameWasNotEdited_AndGotError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertGameWasNotEdited_AndGotErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'MaxGamers-error' pane equals 'The field Max Gamers must be between 1 and 25.'
        /// </summary>
        public string UIMaxGamerserrorPaneInnerText = "The field Max Gamers must be between 1 and 25.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPustastronaInternetEWindow : BrowserWindow
    {
        
        public UIPustastronaInternetEWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Pusta strona";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Pusta strona");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHomePageBoardGamesReWindow : BrowserWindow
    {
        
        public UIHomePageBoardGamesReWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Home Page - Board Games Rental";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Home Page - Board Games Rental");
            this.WindowTitles.Add("Log in - Board Games Rental");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIHomePageBoardGamesReDocument UIHomePageBoardGamesReDocument
        {
            get
            {
                if ((this.mUIHomePageBoardGamesReDocument == null))
                {
                    this.mUIHomePageBoardGamesReDocument = new UIHomePageBoardGamesReDocument(this);
                }
                return this.mUIHomePageBoardGamesReDocument;
            }
        }
        
        public UILoginBoardGamesRentaDocument UILoginBoardGamesRentaDocument
        {
            get
            {
                if ((this.mUILoginBoardGamesRentaDocument == null))
                {
                    this.mUILoginBoardGamesRentaDocument = new UILoginBoardGamesRentaDocument(this);
                }
                return this.mUILoginBoardGamesRentaDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIHomePageBoardGamesReDocument mUIHomePageBoardGamesReDocument;
        
        private UILoginBoardGamesRentaDocument mUILoginBoardGamesRentaDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Home Page - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public UIPasekadresuClient UIPasekadresuClient
        {
            get
            {
                if ((this.mUIPasekadresuClient == null))
                {
                    this.mUIPasekadresuClient = new UIPasekadresuClient(this);
                }
                return this.mUIPasekadresuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPasekadresuClient mUIPasekadresuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasekadresuClient : WinClient
    {
        
        public UIPasekadresuClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Home Page - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdresEdit
        {
            get
            {
                if ((this.mUIAdresEdit == null))
                {
                    this.mUIAdresEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAdresEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adres";
                    this.mUIAdresEdit.WindowTitles.Add("Home Page - Board Games Rental");
                    #endregion
                }
                return this.mUIAdresEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdresEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHomePageBoardGamesReDocument : HtmlDocument
    {
        
        public UIHomePageBoardGamesReDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Home Page - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/";
            this.WindowTitles.Add("Home Page - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UILoginHyperlink
        {
            get
            {
                if ((this.mUILoginHyperlink == null))
                {
                    this.mUILoginHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "navbar_loginLink";
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUILoginHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Log in";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Account/Login";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"navbar_loginLink\" href=\"/Account/Log";
                    this.mUILoginHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUILoginHyperlink.WindowTitles.Add("Home Page - Board Games Rental");
                    #endregion
                }
                return this.mUILoginHyperlink;
            }
        }
        
        public HtmlHyperlink UIHelloadminadminscomHyperlink
        {
            get
            {
                if ((this.mUIHelloadminadminscomHyperlink == null))
                {
                    this.mUIHelloadminadminscomHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHelloadminadminscomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "navbar_helloForLoggedIn";
                    this.mUIHelloadminadminscomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHelloadminadminscomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHelloadminadminscomHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Hello admin@admins.com!";
                    this.mUIHelloadminadminscomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Manage/Index";
                    this.mUIHelloadminadminscomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = "Manage";
                    this.mUIHelloadminadminscomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Manage/Index";
                    this.mUIHelloadminadminscomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHelloadminadminscomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "title=\"Manage\" id=\"navbar_helloForLogged";
                    this.mUIHelloadminadminscomHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIHelloadminadminscomHyperlink.WindowTitles.Add("Home Page - Board Games Rental");
                    #endregion
                }
                return this.mUIHelloadminadminscomHyperlink;
            }
        }
        
        public HtmlHyperlink UIGamesHyperlink
        {
            get
            {
                if ((this.mUIGamesHyperlink == null))
                {
                    this.mUIGamesHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIGamesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIGamesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIGamesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIGamesHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Games";
                    this.mUIGamesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Games";
                    this.mUIGamesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIGamesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Games";
                    this.mUIGamesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIGamesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/Games\"";
                    this.mUIGamesHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIGamesHyperlink.WindowTitles.Add("Home Page - Board Games Rental");
                    #endregion
                }
                return this.mUIGamesHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUILoginHyperlink;
        
        private HtmlHyperlink mUIHelloadminadminscomHyperlink;
        
        private HtmlHyperlink mUIGamesHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginBoardGamesRentaDocument : HtmlDocument
    {
        
        public UILoginBoardGamesRentaDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Log in - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Account/Login";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Account/Login";
            this.WindowTitles.Add("Log in - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "login_emailBox";
                    this.mUIEmailEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Email";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Email\" class=\"form-control\" id=\"lo";
                    this.mUIEmailEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "1";
                    this.mUIEmailEdit.WindowTitles.Add("Log in - Board Games Rental");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public HtmlEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "login_passwdBox";
                    this.mUIPasswordEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Password";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "PASSWORD";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Password\" class=\"form-control\" id=";
                    this.mUIPasswordEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUIPasswordEdit.WindowTitles.Add("Log in - Board Games Rental");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public HtmlButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Id] = "login_submit";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log in";
                    this.mUILoginButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" id=\"login_submit";
                    this.mUILoginButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILoginButton.WindowTitles.Add("Log in - Board Games Rental");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIEmailEdit;
        
        private HtmlEdit mUIPasswordEdit;
        
        private HtmlButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGamesListBoardGamesRWindow : BrowserWindow
    {
        
        public UIGamesListBoardGamesRWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Games List - Board Games Rental";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Games List - Board Games Rental");
            this.WindowTitles.Add("Create - Board Games Rental");
            this.WindowTitles.Add("Edit - Board Games Rental");
            this.WindowTitles.Add("Delete - Board Games Rental");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIGamesListBoardGamesRDocument UIGamesListBoardGamesRDocument
        {
            get
            {
                if ((this.mUIGamesListBoardGamesRDocument == null))
                {
                    this.mUIGamesListBoardGamesRDocument = new UIGamesListBoardGamesRDocument(this);
                }
                return this.mUIGamesListBoardGamesRDocument;
            }
        }
        
        public UICreateBoardGamesRentDocument UICreateBoardGamesRentDocument
        {
            get
            {
                if ((this.mUICreateBoardGamesRentDocument == null))
                {
                    this.mUICreateBoardGamesRentDocument = new UICreateBoardGamesRentDocument(this);
                }
                return this.mUICreateBoardGamesRentDocument;
            }
        }
        
        public UIEditBoardGamesRentalDocument UIEditBoardGamesRentalDocument
        {
            get
            {
                if ((this.mUIEditBoardGamesRentalDocument == null))
                {
                    this.mUIEditBoardGamesRentalDocument = new UIEditBoardGamesRentalDocument(this);
                }
                return this.mUIEditBoardGamesRentalDocument;
            }
        }
        
        public UIDeleteBoardGamesRentDocument UIDeleteBoardGamesRentDocument
        {
            get
            {
                if ((this.mUIDeleteBoardGamesRentDocument == null))
                {
                    this.mUIDeleteBoardGamesRentDocument = new UIDeleteBoardGamesRentDocument(this);
                }
                return this.mUIDeleteBoardGamesRentDocument;
            }
        }
        
        public UIEditBoardGamesRentalDocument1 UIEditBoardGamesRentalDocument1
        {
            get
            {
                if ((this.mUIEditBoardGamesRentalDocument1 == null))
                {
                    this.mUIEditBoardGamesRentalDocument1 = new UIEditBoardGamesRentalDocument1(this);
                }
                return this.mUIEditBoardGamesRentalDocument1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIGamesListBoardGamesRDocument mUIGamesListBoardGamesRDocument;
        
        private UICreateBoardGamesRentDocument mUICreateBoardGamesRentDocument;
        
        private UIEditBoardGamesRentalDocument mUIEditBoardGamesRentalDocument;
        
        private UIDeleteBoardGamesRentDocument mUIDeleteBoardGamesRentDocument;
        
        private UIEditBoardGamesRentalDocument1 mUIEditBoardGamesRentalDocument1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Games List - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public UIPasekadresuClient1 UIPasekadresuClient
        {
            get
            {
                if ((this.mUIPasekadresuClient == null))
                {
                    this.mUIPasekadresuClient = new UIPasekadresuClient1(this);
                }
                return this.mUIPasekadresuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPasekadresuClient1 mUIPasekadresuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasekadresuClient1 : WinClient
    {
        
        public UIPasekadresuClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Games List - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdresEdit
        {
            get
            {
                if ((this.mUIAdresEdit == null))
                {
                    this.mUIAdresEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAdresEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adres";
                    this.mUIAdresEdit.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUIAdresEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdresEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGamesListBoardGamesRDocument : HtmlDocument
    {
        
        public UIGamesListBoardGamesRDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Games List - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Games";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Games";
            this.WindowTitles.Add("Games List - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAddNewItemHyperlink
        {
            get
            {
                if ((this.mUIAddNewItemHyperlink == null))
                {
                    this.mUIAddNewItemHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAddNewItemHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIAddNewItemHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAddNewItemHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAddNewItemHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Add New Item";
                    this.mUIAddNewItemHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Games/Create";
                    this.mUIAddNewItemHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAddNewItemHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Games/Create";
                    this.mUIAddNewItemHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUIAddNewItemHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" href=\"/Games/Cre";
                    this.mUIAddNewItemHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "7";
                    this.mUIAddNewItemHyperlink.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUIAddNewItemHyperlink;
            }
        }
        
        public UIItemTable UIItemTable
        {
            get
            {
                if ((this.mUIItemTable == null))
                {
                    this.mUIItemTable = new UIItemTable(this);
                }
                return this.mUIItemTable;
            }
        }
        
        public HtmlHyperlink UIEditHyperlink
        {
            get
            {
                if ((this.mUIEditHyperlink == null))
                {
                    this.mUIEditHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIEditHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Edit";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Games/Edit/3006";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Games/Edit/3006";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" href=\"/Games/Edi";
                    this.mUIEditHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "14";
                    this.mUIEditHyperlink.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUIEditHyperlink;
            }
        }
        
        public HtmlHyperlink UIDetailsHyperlink
        {
            get
            {
                if ((this.mUIDetailsHyperlink == null))
                {
                    this.mUIDetailsHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDetailsHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Details";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Games/Details/3006";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Games/Details/3006";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" href=\"/Games/Det";
                    this.mUIDetailsHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "13";
                    this.mUIDetailsHyperlink.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUIDetailsHyperlink;
            }
        }
        
        public HtmlHyperlink UIDeleteHyperlink
        {
            get
            {
                if ((this.mUIDeleteHyperlink == null))
                {
                    this.mUIDeleteHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIDeleteHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Delete";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Games/Delete/3006";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Games/Delete/3006";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" href=\"/Games/Del";
                    this.mUIDeleteHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "15";
                    this.mUIDeleteHyperlink.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUIDeleteHyperlink;
            }
        }
        
        public HtmlButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new HtmlButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Id] = "navbar_logoutLink";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Log out";
                    this.mUILogoutButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-link navbar-btn navbar-link";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-link navbar-btn navbar-li";
                    this.mUILogoutButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "2";
                    this.mUILogoutButton.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAddNewItemHyperlink;
        
        private UIItemTable mUIItemTable;
        
        private HtmlHyperlink mUIEditHyperlink;
        
        private HtmlHyperlink mUIDetailsHyperlink;
        
        private HtmlHyperlink mUIDeleteHyperlink;
        
        private HtmlButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemTable : HtmlTable
    {
        
        public UIItemTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = null;
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "Title \r\n\r\nGenre \r\n\r\nMin Gamers \r\n\r\nMax G";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"table\"";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "8";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "table";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "1";
            this.WindowTitles.Add("Games List - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlCell UICodedUICell
        {
            get
            {
                if ((this.mUICodedUICell == null))
                {
                    this.mUICodedUICell = new HtmlCell(this);
                    #region Search Criteria
                    this.mUICodedUICell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUICodedUICell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUICodedUICell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUICodedUICell.SearchProperties[HtmlCell.PropertyNames.InnerText] = "CodedUI ";
                    this.mUICodedUICell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = null;
                    this.mUICodedUICell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "1";
                    this.mUICodedUICell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "1";
                    this.mUICodedUICell.FilterProperties[HtmlCell.PropertyNames.Class] = null;
                    this.mUICodedUICell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "2";
                    this.mUICodedUICell.WindowTitles.Add("Games List - Board Games Rental");
                    #endregion
                }
                return this.mUICodedUICell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCell mUICodedUICell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICreateBoardGamesRentDocument : HtmlDocument
    {
        
        public UICreateBoardGamesRentDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Create - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Games/Create";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Games/Create";
            this.WindowTitles.Add("Create - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UITitleEdit
        {
            get
            {
                if ((this.mUITitleEdit == null))
                {
                    this.mUITitleEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUITitleEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Title";
                    this.mUITitleEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Title";
                    this.mUITitleEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Title";
                    this.mUITitleEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUITitleEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUITitleEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUITitleEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Title\" class=\"form-control\" id=\"Ti";
                    this.mUITitleEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "2";
                    this.mUITitleEdit.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUITitleEdit;
            }
        }
        
        public HtmlEdit UIGenreEdit
        {
            get
            {
                if ((this.mUIGenreEdit == null))
                {
                    this.mUIGenreEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIGenreEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Genre";
                    this.mUIGenreEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Genre";
                    this.mUIGenreEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Genre";
                    this.mUIGenreEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIGenreEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIGenreEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIGenreEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Genre\" class=\"form-control\" id=\"Ge";
                    this.mUIGenreEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "3";
                    this.mUIGenreEdit.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUIGenreEdit;
            }
        }
        
        public HtmlEdit UIMinGamersEdit
        {
            get
            {
                if ((this.mUIMinGamersEdit == null))
                {
                    this.mUIMinGamersEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMinGamersEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "MinGamers";
                    this.mUIMinGamersEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "MinGamers";
                    this.mUIMinGamersEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Min Gamers";
                    this.mUIMinGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMinGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMinGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIMinGamersEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"MinGamers\" class=\"form-control\" id";
                    this.mUIMinGamersEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "4";
                    this.mUIMinGamersEdit.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUIMinGamersEdit;
            }
        }
        
        public HtmlEdit UIMaxGamersEdit
        {
            get
            {
                if ((this.mUIMaxGamersEdit == null))
                {
                    this.mUIMaxGamersEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMaxGamersEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "MaxGamers";
                    this.mUIMaxGamersEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "MaxGamers";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Max Gamers";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"MaxGamers\" class=\"form-control\" id";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "5";
                    this.mUIMaxGamersEdit.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUIMaxGamersEdit;
            }
        }
        
        public HtmlEdit UIReleaseDateEdit
        {
            get
            {
                if ((this.mUIReleaseDateEdit == null))
                {
                    this.mUIReleaseDateEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIReleaseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "ReleaseDate";
                    this.mUIReleaseDateEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "ReleaseDate";
                    this.mUIReleaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Release Date";
                    this.mUIReleaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIReleaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIReleaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIReleaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"ReleaseDate\" class=\"form-control\" ";
                    this.mUIReleaseDateEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIReleaseDateEdit.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUIReleaseDateEdit;
            }
        }
        
        public HtmlEdit UIPriceEdit
        {
            get
            {
                if ((this.mUIPriceEdit == null))
                {
                    this.mUIPriceEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIPriceEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "Price";
                    this.mUIPriceEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "Price";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Price";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"Price\" class=\"form-control\" id=\"Pr";
                    this.mUIPriceEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "7";
                    this.mUIPriceEdit.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUIPriceEdit;
            }
        }
        
        public HtmlInputButton UICreateButton
        {
            get
            {
                if ((this.mUICreateButton == null))
                {
                    this.mUICreateButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Create";
                    this.mUICreateButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUICreateButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "8";
                    this.mUICreateButton.WindowTitles.Add("Create - Board Games Rental");
                    #endregion
                }
                return this.mUICreateButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUITitleEdit;
        
        private HtmlEdit mUIGenreEdit;
        
        private HtmlEdit mUIMinGamersEdit;
        
        private HtmlEdit mUIMaxGamersEdit;
        
        private HtmlEdit mUIReleaseDateEdit;
        
        private HtmlEdit mUIPriceEdit;
        
        private HtmlInputButton mUICreateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditBoardGamesRentalDocument : HtmlDocument
    {
        
        public UIEditBoardGamesRentalDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Games/Edit/3006";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Games/Edit/3006";
            this.WindowTitles.Add("Edit - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlEdit UIMaxGamersEdit
        {
            get
            {
                if ((this.mUIMaxGamersEdit == null))
                {
                    this.mUIMaxGamersEdit = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMaxGamersEdit.SearchProperties[HtmlEdit.PropertyNames.Id] = "MaxGamers";
                    this.mUIMaxGamersEdit.SearchProperties[HtmlEdit.PropertyNames.Name] = "MaxGamers";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Max Gamers";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"MaxGamers\" class=\"form-control\" id";
                    this.mUIMaxGamersEdit.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIMaxGamersEdit.WindowTitles.Add("Edit - Board Games Rental");
                    #endregion
                }
                return this.mUIMaxGamersEdit;
            }
        }
        
        public HtmlInputButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Save";
                    this.mUISaveButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUISaveButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "9";
                    this.mUISaveButton.WindowTitles.Add("Edit - Board Games Rental");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        
        public HtmlEdit UIMaxGamersEdit1
        {
            get
            {
                if ((this.mUIMaxGamersEdit1 == null))
                {
                    this.mUIMaxGamersEdit1 = new HtmlEdit(this);
                    #region Search Criteria
                    this.mUIMaxGamersEdit1.SearchProperties[HtmlEdit.PropertyNames.Id] = "MaxGamers";
                    this.mUIMaxGamersEdit1.SearchProperties[HtmlEdit.PropertyNames.Name] = "MaxGamers";
                    this.mUIMaxGamersEdit1.FilterProperties[HtmlEdit.PropertyNames.LabeledBy] = "Max Gamers";
                    this.mUIMaxGamersEdit1.FilterProperties[HtmlEdit.PropertyNames.Type] = "SINGLELINE";
                    this.mUIMaxGamersEdit1.FilterProperties[HtmlEdit.PropertyNames.Title] = null;
                    this.mUIMaxGamersEdit1.FilterProperties[HtmlEdit.PropertyNames.Class] = "form-control input-validation-error";
                    this.mUIMaxGamersEdit1.FilterProperties[HtmlEdit.PropertyNames.ControlDefinition] = "name=\"MaxGamers\" class=\"form-control inp";
                    this.mUIMaxGamersEdit1.FilterProperties[HtmlEdit.PropertyNames.TagInstance] = "6";
                    this.mUIMaxGamersEdit1.WindowTitles.Add("Edit - Board Games Rental");
                    #endregion
                }
                return this.mUIMaxGamersEdit1;
            }
        }
        #endregion
        
        #region Fields
        private HtmlEdit mUIMaxGamersEdit;
        
        private HtmlInputButton mUISaveButton;
        
        private HtmlEdit mUIMaxGamersEdit1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDeleteBoardGamesRentDocument : HtmlDocument
    {
        
        public UIDeleteBoardGamesRentDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Delete - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Games/Delete/3006";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Games/Delete/3006";
            this.WindowTitles.Add("Delete - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIDeleteButton
        {
            get
            {
                if ((this.mUIDeleteButton == null))
                {
                    this.mUIDeleteButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Id] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Name] = null;
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.DisplayText] = "Delete";
                    this.mUIDeleteButton.SearchProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.Class] = "btn btn-default";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" type=\"submit\" va";
                    this.mUIDeleteButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "3";
                    this.mUIDeleteButton.WindowTitles.Add("Delete - Board Games Rental");
                    #endregion
                }
                return this.mUIDeleteButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIDeleteButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditBoardGamesRentalDocument1 : HtmlDocument
    {
        
        public UIEditBoardGamesRentalDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Edit - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Games/Edit/3010";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Games/Edit/3010";
            this.WindowTitles.Add("Edit - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UIMaxGamerserrorPane
        {
            get
            {
                if ((this.mUIMaxGamerserrorPane == null))
                {
                    this.mUIMaxGamerserrorPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUIMaxGamerserrorPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "MaxGamers-error";
                    this.mUIMaxGamerserrorPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIMaxGamerserrorPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "The field Max Gamers must be between 1 a";
                    this.mUIMaxGamerserrorPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIMaxGamerserrorPane.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
                    this.mUIMaxGamerserrorPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"MaxGamers-error\"";
                    this.mUIMaxGamerserrorPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "9";
                    this.mUIMaxGamerserrorPane.WindowTitles.Add("Edit - Board Games Rental");
                    #endregion
                }
                return this.mUIMaxGamerserrorPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUIMaxGamerserrorPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsBoardGamesRenWindow : BrowserWindow
    {
        
        public UIDetailsBoardGamesRenWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Details - Board Games Rental";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Details - Board Games Rental");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDetailsBoardGamesRenDocument UIDetailsBoardGamesRenDocument
        {
            get
            {
                if ((this.mUIDetailsBoardGamesRenDocument == null))
                {
                    this.mUIDetailsBoardGamesRenDocument = new UIDetailsBoardGamesRenDocument(this);
                }
                return this.mUIDetailsBoardGamesRenDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIDetailsBoardGamesRenDocument mUIDetailsBoardGamesRenDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "AddressDisplay Control";
            this.WindowTitles.Add("Details - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public UIPasekadresuClient2 UIPasekadresuClient
        {
            get
            {
                if ((this.mUIPasekadresuClient == null))
                {
                    this.mUIPasekadresuClient = new UIPasekadresuClient2(this);
                }
                return this.mUIPasekadresuClient;
            }
        }
        #endregion
        
        #region Fields
        private UIPasekadresuClient2 mUIPasekadresuClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPasekadresuClient2 : WinClient
    {
        
        public UIPasekadresuClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Details - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAdresEdit
        {
            get
            {
                if ((this.mUIAdresEdit == null))
                {
                    this.mUIAdresEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAdresEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Adres";
                    this.mUIAdresEdit.WindowTitles.Add("Details - Board Games Rental");
                    #endregion
                }
                return this.mUIAdresEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAdresEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDetailsBoardGamesRenDocument : HtmlDocument
    {
        
        public UIDetailsBoardGamesRenDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Details - Board Games Rental";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/Games/Details/3006";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost:5000/Games/Details/3006";
            this.WindowTitles.Add("Details - Board Games Rental");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIBacktoListHyperlink
        {
            get
            {
                if ((this.mUIBacktoListHyperlink == null))
                {
                    this.mUIBacktoListHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIBacktoListHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Back to List";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/Games";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost:5000/Games";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "btn btn-default";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"btn btn-default\" href=\"/Games\"";
                    this.mUIBacktoListHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "8";
                    this.mUIBacktoListHyperlink.WindowTitles.Add("Details - Board Games Rental");
                    #endregion
                }
                return this.mUIBacktoListHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIBacktoListHyperlink;
        #endregion
    }
}
